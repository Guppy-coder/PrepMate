from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider

import json


from langchain.embeddings import OpenAIEmbeddings
from langchain.indexes.vectorstore import VectorStoreIndexWrapper
from langchain.vectorstores.cassandra import Cassandra
from datasets import load_dataset
from tenacity import retry, wait_exponential, stop_after_attempt

from dotenv import load_dotenv
import os

load_dotenv()
api_key = os.getenv('OPENAI_API_KEY')

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
VStore = None
def connect_to_db():
    print("connecting to database")
    cloud_config= {
    'secure_connect_bundle': 'secure-connect-prep-mate-db.zip'
    }

    # This token JSON file is autogenerated when you download your token, 
    # if yours is different update the file name below
    with open("tsgsekgothe6969@gmail.com-token.json") as f:
        secrets = json.load(f)

    CLIENT_ID = secrets["clientId"]
    CLIENT_SECRET = secrets["secret"]

    auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
    cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
    session = cluster.connect()
    return session

# @retry(wait=wait_exponential(multiplier=1, min=4, max=10), stop=stop_after_attempt(5))
def create_table(table_name):
    print("creating table")
    embeddings = OpenAIEmbeddings(openai_api_key=api_key)
    myCasandraVStore=Cassandra(
        embedding=embeddings,
        session=connect_to_db(),
        keyspace="prep_mate",
        table_name=table_name
    )

    myCasandraVStore = myCasandraVStore

    return myCasandraVStore

def add_data_to_vector_table(data_table, data):
    data = data.split("\n")
    data_table.add_texts(data)

def get_vector_index_wrapper():
    if VStore is None:
        return None
    return VectorStoreIndexWrapper(VStore)